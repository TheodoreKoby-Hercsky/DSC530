{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Examples and Exercises from Think Stats, 2nd Edition\n",
    "\n",
    "http://thinkstats2.com\n",
    "\n",
    "Copyright 2016 Allen B. Downey\n",
    "\n",
    "MIT License: https://opensource.org/licenses/MIT\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "from __future__ import print_function, division\n",
    "\n",
    "%matplotlib inline\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import nsfg\n",
    "import first"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Given a list of values, there are several ways to count the frequency of each value."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "t = [1, 2, 2, 3, 5]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can use a Python dictionary:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{1: 1, 2: 2, 3: 1, 5: 1}"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hist = {}\n",
    "for x in t:\n",
    "    hist[x] = hist.get(x, 0) + 1\n",
    "    \n",
    "hist"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can use a `Counter` (which is a dictionary with additional methods):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Counter({1: 1, 2: 2, 3: 1, 5: 1})"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from collections import Counter\n",
    "counter = Counter(t)\n",
    "counter"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Or you can use the `Hist` object provided by `thinkstats2`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Hist({1: 1, 2: 2, 3: 1, 5: 1})"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import thinkstats2\n",
    "hist = thinkstats2.Hist([1, 2, 2, 3, 5])\n",
    "hist"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`Hist` provides `Freq`, which looks up the frequency of a value."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hist.Freq(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can also use the bracket operator, which does the same thing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hist[2]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If the value does not appear, it has frequency 0."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hist[4]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The `Values` method returns the values:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_keys([1, 2, 3, 5])"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hist.Values()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "So you can iterate the values and their frequencies like this:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 1\n",
      "2 2\n",
      "3 1\n",
      "5 1\n"
     ]
    }
   ],
   "source": [
    "for val in sorted(hist.Values()):\n",
    "    print(val, hist[val])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Or you can use the `Items` method:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 1\n",
      "2 2\n",
      "3 1\n",
      "5 1\n"
     ]
    }
   ],
   "source": [
    "for val, freq in hist.Items():\n",
    "     print(val, freq)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`thinkplot` is a wrapper for `matplotlib` that provides functions that work with the objects in `thinkstats2`.\n",
    "\n",
    "For example `Hist` plots the values and their frequencies as a bar graph.\n",
    "\n",
    "`Config` takes parameters that label the x and y axes, among other things."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import thinkplot\n",
    "thinkplot.Hist(hist)\n",
    "thinkplot.Config(xlabel='value', ylabel='frequency')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As an example, I'll replicate some of the figures from the book.\n",
    "\n",
    "First, I'll load the data from the pregnancy file and select the records for live births."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "preg = nsfg.ReadFemPreg()\n",
    "live = preg[preg.outcome == 1]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here's the histogram of birth weights in pounds.  Notice that `Hist` works with anything iterable, including a Pandas Series.  The `label` attribute appears in the legend when you plot the `Hist`. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "hist = thinkstats2.Hist(live.birthwgt_lb, label='birthwgt_lb')\n",
    "thinkplot.Hist(hist)\n",
    "thinkplot.Config(xlabel='Birth weight (pounds)', ylabel='Count')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Before plotting the ages, I'll apply `floor` to round down:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "ages = np.floor(live.agepreg)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "hist = thinkstats2.Hist(ages, label='agepreg')\n",
    "thinkplot.Hist(hist)\n",
    "thinkplot.Config(xlabel='years', ylabel='Count')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As an exercise, plot the histogram of pregnancy lengths (column `prglngth`)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Solution goes here - Created a histogram that is for the pregnancy length by using the column prglngth.\n",
    "hist = thinkstats2.Hist(live.prglngth, label='prglngth')\n",
    "thinkplot.Hist(hist)\n",
    "thinkplot.Config(xlabel='week', ylabel='count')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`Hist` provides smallest, which select the lowest values and their frequencies."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "for weeks, freq in hist.Smallest(10):\n",
    "    print(weeks, freq)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Use `Largest` to display the longest pregnancy lengths."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "50 2\n",
      "48 7\n",
      "47 1\n",
      "46 1\n",
      "45 10\n",
      "44 46\n",
      "43 148\n",
      "42 328\n",
      "41 587\n",
      "40 1116\n"
     ]
    }
   ],
   "source": [
    "# Solution goes here - As seen above all that was needed is to change the hist.smallest to hist.largest to display the 10 longest pregnancy lengths\n",
    "for weeks, freq in hist.Largest(10):\n",
    "    print(weeks, freq)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From live births, we can select first babies and others using `birthord`, then compute histograms of pregnancy length for the two groups."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "firsts = live[live.birthord == 1]\n",
    "others = live[live.birthord != 1]\n",
    "\n",
    "first_hist = thinkstats2.Hist(firsts.prglngth, label='first')\n",
    "other_hist = thinkstats2.Hist(others.prglngth, label='other')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can use `width` and `align` to plot two histograms side-by-side."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "width = 0.45\n",
    "thinkplot.PrePlot(2)\n",
    "thinkplot.Hist(first_hist, align='right', width=width)\n",
    "thinkplot.Hist(other_hist, align='left', width=width)\n",
    "thinkplot.Config(xlabel='weeks', ylabel='Count', xlim=[27, 46])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`Series` provides methods to compute summary statistics:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "mean = live.prglngth.mean()\n",
    "var = live.prglngth.var()\n",
    "std = live.prglngth.std()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here are the mean and standard deviation:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(38.56055968517709, 2.702343810070593)"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean, std"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As an exercise, confirm that `std` is the square root of `var`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Solution goes here - As seen below I calculated the square root of var and set it == to the std.\n",
    "np.sqrt(var)==std"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here's are the mean pregnancy lengths for first babies and others:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(38.60095173351461, 38.52291446673706)"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "firsts.prglngth.mean(), others.prglngth.mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And here's the difference (in weeks):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.07803726677754952"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "firsts.prglngth.mean() - others.prglngth.mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This functon computes the Cohen effect size, which is the difference in means expressed in number of standard deviations:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "def CohenEffectSize(group1, group2):\n",
    "    \"\"\"Computes Cohen's effect size for two groups.\n",
    "    \n",
    "    group1: Series or DataFrame\n",
    "    group2: Series or DataFrame\n",
    "    \n",
    "    returns: float if the arguments are Series;\n",
    "             Series if the arguments are DataFrames\n",
    "    \"\"\"\n",
    "    diff = group1.mean() - group2.mean()\n",
    "\n",
    "    var1 = group1.var()\n",
    "    var2 = group2.var()\n",
    "    n1, n2 = len(group1), len(group2)\n",
    "\n",
    "    pooled_var = (n1 * var1 + n2 * var2) / (n1 + n2)\n",
    "    d = diff / np.sqrt(pooled_var)\n",
    "    return d"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Compute the Cohen effect size for the difference in pregnancy length for first babies and others."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.028879044654449883"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Solution goes here - As we use the CohenEffectSize function to compute the difference in pregnancy length for first babies and others.\n",
    "CohenEffectSize(firsts.prglngth, others.prglngth)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "## Exercises"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Using the variable `totalwgt_lb`, investigate whether first babies are lighter or heavier than others. \n",
    "\n",
    "Compute Cohen’s effect size to quantify the difference between the groups.  How does it compare to the difference in pregnancy length?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(7.201094430437772, 7.325855614973262)"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Solution goes here - As seen below I calculated the mean total weight of the first\n",
    "# and other babies.\n",
    "firsts.totalwgt_lb.mean(), others.totalwgt_lb.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.12476118453549034"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# As we see below the first babies are considered to be 0.12476118453549034 liter than \n",
    "# others babies\n",
    "others.totalwgt_lb.mean()-firsts.totalwgt_lb.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-0.088672927072602"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Solution goes here - The Cohen’s effect size is calculated below by using the \n",
    "# total weight fr first and other babies.\n",
    "CohenEffectSize(firsts.totalwgt_lb, others.totalwgt_lb)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For the next few exercises, we'll load the respondent file:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "resp = nsfg.ReadFemResp()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Make a histogram of <tt>totincr</tt> the total income for the respondent's family.  To interpret the codes see the [codebook](http://www.icpsr.umich.edu/nsfg6/Controller?displayPage=labelDetails&fileCode=FEM&section=R&subSec=7876&srtLabel=607543)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Solution goes here - Created a histogram similar to the ones above but is for the \n",
    "# total increase in the total income.\n",
    "hist = thinkstats2.Hist(resp.totincr)\n",
    "thinkplot.Hist(hist, label='totincr')\n",
    "thinkplot.Config(xlabel='Total Income', ylabel='Count')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Make a histogram of <tt>age_r</tt>, the respondent's age at the time of interview."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Solution goes here - Created a histogram for the age_r column which shows the age at \n",
    "# the time of the interview\n",
    "hist = thinkstats2.Hist(resp.ager)\n",
    "thinkplot.Hist(hist, label='ager')\n",
    "thinkplot.Config(xlabel='Years Old', ylabel='Count')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Make a histogram of <tt>numfmhh</tt>, the number of people in the respondent's household."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Solution goes here - Next I created a histogram to show the number of people in \n",
    "# the respondent household that is from the column numfmhh.\n",
    "hist = thinkstats2.Hist(resp.numfmhh)\n",
    "thinkplot.Hist(hist, label='numfmhh')\n",
    "thinkplot.Config(xlabel='People by Amount', ylabel='Count')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Make a histogram of <tt>parity</tt>, the number of children borne by the respondent.  How would you describe this distribution?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Solution goes here - Created a histogram of the number of children that are born by the \n",
    "# repsondent\n",
    "hist = thinkstats2.Hist(resp.parity)\n",
    "thinkplot.Hist(hist, label='parity')\n",
    "thinkplot.Config(xlabel='Children born', ylabel='Count')\n",
    "# As the distribution can be described as skewed to the right and positive."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Use Hist.Largest to find the largest values of <tt>parity</tt>."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(22, 1),\n",
       " (16, 1),\n",
       " (10, 3),\n",
       " (9, 2),\n",
       " (8, 8),\n",
       " (7, 15),\n",
       " (6, 29),\n",
       " (5, 95),\n",
       " (4, 309),\n",
       " (3, 828),\n",
       " (2, 1603),\n",
       " (1, 1519),\n",
       " (0, 3230)]"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Solution goes here - we can use the hist.largest function\n",
    "hist.Largest(15)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's investigate whether people with higher income have higher parity.  Keep in mind that in this study, we are observing different people at different times during their lives, so this data is not the best choice for answering this question.  But for now let's take it at face value.\n",
    "\n",
    "Use <tt>totincr</tt> to select the respondents with the highest income (level 14).  Plot the histogram of <tt>parity</tt> for just the high income respondents."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYUAAAEGCAYAAACKB4k+AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8QVMy6AAAACXBIWXMAAAsTAAALEwEAmpwYAAAUMElEQVR4nO3dfbAd9X3f8fcHCSPxlPAgGAnJvcpEdnka27V4CLgtMal5SAykQCwKWDAUGRsS22GSQuqZ0hlpxn/Yrtu4gBkSEIWKyhiKoBnHmCcbjwoIQ22ErEFjMNygIlk1tZwCtsi3f9zVciRdSUegc/fCfb9mNGf3t7/d89XOvfrot7vnd1JVSJIEsEfXBUiSxg9DQZLUMhQkSS1DQZLUMhQkSa3JXRfwdhx88ME1NDTUdRmS9I7yxBNP/Kyqpo227R0dCkNDQ6xYsaLrMiTpHSXJT7e3zctHkqSWoSBJahkKkqTWO/qegiTtyK9//WuGh4d57bXXui6lE1OmTGHmzJnsueeefe9jKEh61xoeHma//fZjaGiIJF2XM6aqig0bNjA8PMzs2bP73s/LR5LetV577TUOOuigCRcIAEk46KCDdnmUZChIelebiIGw2Vv5uxsKkqSW9xQkTRhXLFyyW4/3tS+ct1uPN5rrr7+evffem09+8pPcfPPNfOxjH2PGjBkDe78JHQq7+wekX2PxgyTpnW/Tpk1cdtll7frNN9/MUUcdZShI0jvV888/z6mnnspxxx3Hk08+yfve9z5uueUWvvSlL3HPPffw6quvcsIJJ/D1r3+dJJx00kmccMIJfP/73+eMM85g48aN7Lvvvu20Pueffz5Tp05l0aJF3Hjjjdx1110A3HfffVx33XXceeedb6te7ylI0oCtXr2aBQsW8MMf/pD999+fa6+9liuuuILHH3+cp59+mldffZV777237f/KK6/w8MMPc+WVV7Zt55xzDnPnzuW2227jqaee4vTTT2fVqlWsX78egJtuuomLL774bdc60FBI8nySHyV5KsmKpu3AJPclebZ5PaCn/9VJ1iRZneSUQdYmSWNl1qxZnHjiiQBccMEFPPLIIzz44IMcd9xxHH300TzwwAOsXLmy7f+JT3xip8dMwoUXXsitt97KK6+8wvLlyznttNPedq1jcfnod6vqZz3rVwH3V9UXk1zVrP+bJEcA84AjgRnAd5K8r6reGIMaJWlgtn40NAmf+cxnWLFiBbNmzeKaa67Z4vME++yzT1/Hvfjii/n4xz/OlClTOPfcc5k8+e3/k97F5aMzgcXN8mLgrJ7226vq9ap6DlgDHDv25UnS7vXCCy+wfPlyAJYsWcJHPvIRAA4++GB++ctfcscdd/R1nP3224+NGze26zNmzGDGjBksXLiQiy66aLfUOuiRQgHfTlLA16vqBuDQqloLUFVrkxzS9D0M+J89+w43bVtIsgBYAPDe9753kLVLepfp6sm/ww8/nMWLF/OpT32KOXPm8OlPf5qf//znHH300QwNDXHMMcf0dZyLLrqIyy67jKlTp7J8+XKmTp3K+eefz/r16zniiCN2S62DDoUTq+ql5h/++5L8eAd9R/voXW3TMBIsNwDMnTt3m+2SNN7sscceXH/99Vu0LVy4kIULF27T96GHHtpi/ZprrmmXzz77bM4+++wttj/yyCNceumlu63WgYZCVb3UvK5Lchcjl4NeTjK9GSVMB9Y13YeBWT27zwReGmR9kvRO9uEPf5h99tmHL3/5y7vtmAO7p5BknyT7bV4GPgY8DSwD5jfd5gN3N8vLgHlJ9koyG5gDPDao+iRpLAwNDfH0008P5NhPPPEE3/3ud9lrr7122zEHOVI4FLirues+GfivVfWtJI8DS5NcArwAnAtQVSuTLAWeATYBl/vkkaS3q6om7KR4Vbt+hX1goVBVPwE+MEr7BuDk7eyzCFg0qJokTSxTpkxhw4YNE3L67M3fpzBlypRd2s9pLiS9a82cOZPh4eH2U78TzeZvXtsVhoKkd60999xzl751TM59JEnqYShIklqGgiSpZShIklqGgiSpZShIklqGgiSpZShIklqGgiSpZShIklqGgiSpZShIklqGgiSpZShIklqGgiSpZShIklqGgiSpZShIklqGgiSpZShIklqGgiSpZShIklqGgiSpZShIklqGgiSpZShIklqGgiSpZShIklqGgiSpNfBQSDIpyZNJ7m3WD0xyX5Jnm9cDevpenWRNktVJThl0bZKkLY3FSOGzwKqe9auA+6tqDnB/s06SI4B5wJHAqcC1SSaNQX2SpMZAQyHJTOD3gRt7ms8EFjfLi4Gzetpvr6rXq+o5YA1w7CDrkyRtadAjha8Cfw78Q0/boVW1FqB5PaRpPwx4saffcNO2hSQLkqxI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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Solution goes here - Selected the the respondents with the highest income at level 14.\n",
    "# Then created a histogram for parity for the high income respondents\n",
    "high_income = resp[resp.totincr == 14]\n",
    "hist = thinkstats2.Hist(high_income.parity)\n",
    "thinkplot.Hist(hist, label='parity')\n",
    "thinkplot.Config(xlabel='Parity', ylabel='Count')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Find the largest parities for high income respondents."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(8, 1), (7, 1), (5, 5), (4, 19), (3, 123), (2, 267), (1, 229), (0, 515)]"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Solution goes here - I used the hist.largest function to find the largest parities for \n",
    "# the high income respondents.\n",
    "hist.Largest(15)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Compare the mean <tt>parity</tt> for high income respondents and others."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1.0758620689655172, 1.2495758136665125)"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Solution goes here - I calculated the low income and compared it to the high income \n",
    "# respondents\n",
    "low_income = resp[resp.totincr < 14]\n",
    "high_income.parity.mean(), low_income.parity.mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Compute the Cohen effect size for this difference.  How does it compare with the difference in pregnancy length for first babies and others?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-0.1251185531466061"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Solution goes here - I will use the CohenEffectSize function\n",
    "CohenEffectSize(high_income.parity, low_income.parity)\n",
    "# The Cohen effect size is stronger than the Cohen effect size for the \n",
    "# As the difference in pregnancy length for first babies and others is 0.028879044654449883"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
