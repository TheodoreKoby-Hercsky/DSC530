{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Examples and Exercises from Think Stats, 2nd Edition\n",
    "\n",
    "http://thinkstats2.com\n",
    "\n",
    "Copyright 2016 Allen B. Downey\n",
    "\n",
    "MIT License: https://opensource.org/licenses/MIT\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "from __future__ import print_function, division\n",
    "\n",
    "%matplotlib inline\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import nsfg\n",
    "import first\n",
    "import thinkstats2\n",
    "import thinkplot"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Examples\n",
    "\n",
    "One more time, I'll load the data from the NSFG."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "live, firsts, others = first.MakeFrames()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And compute the distribution of birth weight for first babies and others."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Firsts 4413 4363\n",
      "Others 4735 4675\n"
     ]
    }
   ],
   "source": [
    "first_wgt = firsts.totalwgt_lb\n",
    "first_wgt_dropna = first_wgt.dropna()\n",
    "print('Firsts', len(first_wgt), len(first_wgt_dropna))\n",
    " \n",
    "other_wgt = others.totalwgt_lb\n",
    "other_wgt_dropna = other_wgt.dropna()\n",
    "print('Others', len(other_wgt), len(other_wgt_dropna))\n",
    "\n",
    "first_pmf = thinkstats2.Pmf(first_wgt_dropna, label='first')\n",
    "other_pmf = thinkstats2.Pmf(other_wgt_dropna, label='other')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can plot the PMFs on the same scale, but it is hard to see if there is a difference."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "width = 0.4 / 16\n",
    "\n",
    "# plot PMFs of birth weights for first babies and others\n",
    "thinkplot.PrePlot(2)\n",
    "thinkplot.Hist(first_pmf, align='right', width=width)\n",
    "thinkplot.Hist(other_pmf, align='left', width=width)\n",
    "thinkplot.Config(xlabel='Weight (pounds)', ylabel='PMF')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`PercentileRank` computes the fraction of `scores` less than or equal to `your_score`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "def PercentileRank(scores, your_score):\n",
    "    count = 0\n",
    "    for score in scores:\n",
    "        if score <= your_score:\n",
    "            count += 1\n",
    "\n",
    "    percentile_rank = 100.0 * count / len(scores)\n",
    "    return percentile_rank"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If this is the list of scores."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "t = [55, 66, 77, 88, 99]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And you got the 88, your percentile rank is 80."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "80.0"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "PercentileRank(t, 88)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`Percentile` takes a percentile rank and computes the corresponding percentile. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "def Percentile(scores, percentile_rank):\n",
    "    scores.sort()\n",
    "    for score in scores:\n",
    "        if PercentileRank(scores, score) >= percentile_rank:\n",
    "            return score"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The median is the 50th percentile, which is 77."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "77"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Percentile(t, 50)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here's a more efficient way to compute percentiles."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "def Percentile2(scores, percentile_rank):\n",
    "    scores.sort()\n",
    "    index = percentile_rank * (len(scores)-1) // 100\n",
    "    return scores[index]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's hope we get the same answer."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "77"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Percentile2(t, 50)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The Cumulative Distribution Function (CDF) is almost the same as `PercentileRank`.  The only difference is that the result is 0-1 instead of 0-100."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "def EvalCdf(sample, x):\n",
    "    count = 0.0\n",
    "    for value in sample:\n",
    "        if value <= x:\n",
    "            count += 1\n",
    "\n",
    "    prob = count / len(sample)\n",
    "    return prob"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "t = [1, 2, 2, 3, 5]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can evaluate the CDF for various values:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.0, 0.2, 0.6, 0.8, 0.8, 1.0)"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "EvalCdf(t, 0), EvalCdf(t, 1), EvalCdf(t, 2), EvalCdf(t, 3), EvalCdf(t, 4), EvalCdf(t, 5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here's an example using real data, the distribution of pregnancy length for live births."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "cdf = thinkstats2.Cdf(live.prglngth, label='prglngth')\n",
    "thinkplot.Cdf(cdf)\n",
    "thinkplot.Config(xlabel='Pregnancy length (weeks)', ylabel='CDF', loc='upper left')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`Cdf` provides `Prob`, which evaluates the CDF; that is, it computes the fraction of values less than or equal to the given value.  For example, 94% of pregnancy lengths are less than or equal to 41."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9406427634455619"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cdf.Prob(41)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "`Value` evaluates the inverse CDF; given a fraction, it computes the corresponding value.  For example, the median is the value that corresponds to 0.5."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "39"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cdf.Value(0.5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In general, CDFs are a good way to visualize distributions.  They are not as noisy as PMFs, and if you plot several CDFs on the same axes, any differences between them are apparent."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "first_cdf = thinkstats2.Cdf(firsts.totalwgt_lb, label='first')\n",
    "other_cdf = thinkstats2.Cdf(others.totalwgt_lb, label='other')\n",
    "\n",
    "thinkplot.PrePlot(2)\n",
    "thinkplot.Cdfs([first_cdf, other_cdf])\n",
    "thinkplot.Config(xlabel='Weight (pounds)', ylabel='CDF')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this example, we can see that first babies are slightly, but consistently, lighter than others.\n",
    "\n",
    "We can use the CDF of birth weight to compute percentile-based statistics."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "weights = live.totalwgt_lb\n",
    "live_cdf = thinkstats2.Cdf(weights, label='live')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Again, the median is the 50th percentile."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7.375"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "median = live_cdf.Percentile(50)\n",
    "median"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The interquartile range is the interval from the 25th to 75th percentile."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(6.5, 8.125)"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "iqr = (live_cdf.Percentile(25), live_cdf.Percentile(75))\n",
    "iqr"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can use the CDF to look up the percentile rank of a particular value.  For example, my second daughter was 10.2 pounds at birth, which is near the 99th percentile."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "98.82717415357381"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "live_cdf.PercentileRank(10.2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If we draw a random sample from the observed weights and map each weigh to its percentile rank."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "sample = np.random.choice(weights, 100, replace=True)\n",
    "ranks = [live_cdf.PercentileRank(x) for x in sample]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The resulting list of ranks should be approximately uniform from 0-1."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "rank_cdf = thinkstats2.Cdf(ranks)\n",
    "thinkplot.Cdf(rank_cdf)\n",
    "thinkplot.Config(xlabel='Percentile rank', ylabel='CDF')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "That observation is the basis of `Cdf.Sample`, which generates a random sample from a Cdf.  Here's an example."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "resample = live_cdf.Sample(1000)\n",
    "thinkplot.Cdf(live_cdf)\n",
    "thinkplot.Cdf(thinkstats2.Cdf(resample, label='resample'))\n",
    "thinkplot.Config(xlabel='Birth weight (pounds)', ylabel='CDF')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This confirms that the random sample has the same distribution as the original data."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "## Exercises"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "**Exercise 4-1:** How much did you weigh at birth? If you don’t know, call your mother or someone else who knows. Using the NSFG data (all live births), compute the distribution of birth weights and use it to find your percentile rank. If you were a first baby, find your percentile rank in the distribution for first babies. Otherwise use the distribution for others. If you are in the 90th percentile or higher, call your mother back and apologize."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "20.05500802200321"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# I was the first baby my mom had and I weighed 6.3 pounds\n",
    "# Being that I was the first baby I will find what my percentile rank \n",
    "# Is compared to the first_cdf\n",
    "first_cdf.PercentileRank(6.3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As seen above I was only in the 20th percentile meaning I was only bigger and or the same weight as 20% of the other first babies."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "**Exercise 4-2:** The numbers generated by `numpy.random.random` are supposed to be uniform between 0 and 1; that is, every value in the range should have the same probability.\n",
    "\n",
    "Generate 1000 numbers from `numpy.random.random` and plot their PMF.  What goes wrong?\n",
    "\n",
    "Now plot the CDF. Is the distribution uniform?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "# First I will set one_thousand equal to np random 1000 numbers\n",
    "one_thousand = np.random.random(1000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Next I will plot their PMF by setting pmf equal to one_thousand\n",
    "pmf = thinkstats2.Pmf(one_thousand)\n",
    "thinkplot.Pmf(pmf)\n",
    "thinkplot.Config(xlabel='Generated Numbers', ylabel='pmf')\n",
    "thinkplot.Pmf(pmf)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As seen above we seen that the plot just shows a blue box for all the numbers generated."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'xscale': 'linear', 'yscale': 'linear'}"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Next I will plot the CDF and see if that changes the results\n",
    "# First I will set the cdf equal to the one_thousand random numbers.\n",
    "cdf=thinkstats2.Cdf(one_thousand)\n",
    "thinkplot.Cdf(cdf)\n",
    "thinkplot.Config(xlabel='Generated Numbers', ylabel='cdf')\n",
    "thinkplot.Cdf(cdf)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As seen above we see that by using cdf instead of pmf the plot we generate creates a upward movement in cdf as the amount of generated numbers goes up."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
